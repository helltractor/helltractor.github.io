import{_ as h}from"./ValaxyMain.vue_vue_type_style_index_0_lang.C3_yHAra.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as f,a as p,u as v}from"./chunks/vue-router.ChBfvDAv.js";import{X as g,b_ as e,bB as j,b3 as k,be as n,_ as a,a5 as l,b5 as B}from"./framework.BXq2oTmp.js";import"./app.D6GkSuKK.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.yKBkfHmz.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.bnmDaBJL.js";const y=f("/jobs/question/java-basic",async r=>JSON.parse('{"title":"Java Basic","description":"","frontmatter":{"title":"Java Basic","title_zh":"Java 基础","date":"2025-04-11 15:28:13"},"headers":[],"relativePath":"pages/jobs/question/java-basic.md","lastUpdated":null}'),{lazy:(r,o)=>r.name===o.name}),w={__name:"java-basic",setup(r,{expose:o}){var u;const{data:i}=y(),c=v(),d=p(),s=Object.assign(d.meta.frontmatter||{},((u=i.value)==null?void 0:u.frontmatter)||{});return c.currentRoute.value.data=i.value,B("valaxy:frontmatter",s),globalThis.$frontmatter=s,o({frontmatter:{title:"Java Basic",title_zh:"Java 基础",date:"2025-04-11 15:28:13"}}),(t,m)=>{const b=h;return k(),g(b,{frontmatter:j(s)},{"main-content-md":e(()=>m[0]||(m[0]=[a("h2",{id:"基本类型和包装类型",tabindex:"-1"},[l("基本类型和包装类型 "),a("a",{class:"header-anchor",href:"#基本类型和包装类型","aria-label":'Permalink to "基本类型和包装类型"'},"​")],-1),a("details",{class:"details custom-block"},[a("summary",null,"基本类型和包装类型的种类（8 种）"),a("ul",null,[a("li",null,"基本类型：byte、short、int、long、float、double、char、boolean。"),a("li",null,"包装类型：Byte、Short、Integer、Long、Float、Double、Character、Boolean。")])],-1),a("details",{class:"details custom-block"},[a("summary",null,"基本类型和包装类型的区别？"),a("ul",null,[a("li",null,"用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。"),a("li",null,"存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。"),a("li",null,"占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。"),a("li",null,"默认值：成员变量包装类型不赋值就是 null ，而基本类型有默认值且不是 null。"),a("li",null,"比较方式：对于基本数据类型来说，== 比较的是值。对于包装数据类型来说，== 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法。")])],-1),a("details",{class:"details custom-block"},[a("summary",null,"浮点数运算的精度问题？"),a("p",null,"答：浮点数运算的精度问题是由于浮点数的二进制表示方式导致的。 浮点数在计算机中是以二进制的形式存储的，而二进制无法精确表示某些十进制小数，比如 0.1。 所以在计算机中，0.1 会被近似表示为一个无限循环小数。这就导致了浮点数运算的精度问题。 解决方法：可以使用 BigDecimal 类来解决浮点数运算的精度问题。")],-1),a("details",{class:"details custom-block"},[a("summary",null,"String 为什么不可变？"),a("ul",null,[a("li",null,"通过使用 final 关键字，String 类可以被设计成不可变的。"),a("li",null,"不可变的字符串有利于字符串常量池的实现，提高字符串的共享性和安全性。")]),a("hr"),a("ul",null,[a("li",null,"字符串常量池位于方法区，存储字符串常量。")])],-1),a("details",{class:"details custom-block"},[a("summary",null,"String，StringBuffer，StringBuilder 的区别？"),a("ul",null,[a("li",null,"String 是不可变的字符串，每次修改都会生成新的字符串对象，适用于字符串不经常变化的场景。"),a("li",null,"StringBuffer 是线程安全的可变字符串，适用于多线程场景。"),a("li",null,"StringBuilder 是非线程安全的可变字符串，适用于单线程场景。")])],-1),a("h2",{id:"面向对象",tabindex:"-1"},[l("面向对象 "),a("a",{class:"header-anchor",href:"#面向对象","aria-label":'Permalink to "面向对象"'},"​")],-1),a("p",null,"面向对象（Object-Oriented Programming, OOP）是 Java 的核心编程范式，通过定义类和对象来组织程序。主要概念包括：",-1),a("ul",null,[a("li",null,[a("strong",null,"类"),l("：描述一组具有相同属性和行为的对象的模板。")]),a("li",null,[a("strong",null,"对象"),l("：类的实例，具有状态和行为。")]),a("li",null,[a("strong",null,"封装"),l("：通过将数据和方法封装在类中，控制访问权限，提高安全性和可维护性。")]),a("li",null,[a("strong",null,"继承"),l("：通过继承父类，子类可以重用父类的属性和方法，并且可以扩展或重写父类的方法。")]),a("li",null,[a("strong",null,"多态"),l("：通过接口或继承实现不同对象以统一的方式被调用的能力，具体执行方法由实际对象类型决定。")])],-1),a("hr",null,null,-1),a("details",{class:"details custom-block"},[a("summary",null,"面向对象的三大特征是什么？"),a("p",null,"答：封装、继承、多态。")],-1),a("h3",{id:"重载与重写",tabindex:"-1"},[l("重载与重写 "),a("a",{class:"header-anchor",href:"#重载与重写","aria-label":'Permalink to "重载与重写"'},"​")],-1),a("h2",{id:"反射",tabindex:"-1"},[l("反射 "),a("a",{class:"header-anchor",href:"#反射","aria-label":'Permalink to "反射"'},"​")],-1),a("h2",{id:"异常",tabindex:"-1"},[l("异常 "),a("a",{class:"header-anchor",href:"#异常","aria-label":'Permalink to "异常"'},"​")],-1),a("h2",{id:"注解",tabindex:"-1"},[l("注解 "),a("a",{class:"header-anchor",href:"#注解","aria-label":'Permalink to "注解"'},"​")],-1),a("details",{class:"details custom-block"},[a("summary",null,"@RestController 和@Controller 的区别"),a("p",null,"答：@RestController 是 Spring4 之后加入的注解，是@ResponseBody 和@Controller 的组合注解，用于返回 json 数据。 @Controller 是 SpringMVC 的注解，用于标识控制器类。")],-1),a("details",{class:"details custom-block"},[a("summary",null,"@Autowired 和@Resource 的区别"),a("p",null,"@Autowired 是 Spring 的注解，按类型注入，@Resource 是 J2EE 的注解，按名称注入。")],-1),a("h2",{id:"jar-java-archive",tabindex:"-1"},[l("JAR (Java Archive) "),a("a",{class:"header-anchor",href:"#jar-java-archive","aria-label":'Permalink to "JAR (Java Archive)"'},"​")],-1),a("details",{class:"details custom-block"},[a("summary",null,"打包成 jar 包之后这些**依赖包**的位置在哪呢，java 是怎么识别的？"),a("p",null,[a("s",null,[l("在我的项目配置，项目中使用maven来管理依赖和打包，在编译后，会打包到"),a("code",null,"./target/"),l("，java是通过classpath来识别依赖的。")])]),a("ol",null,[a("li",null,[l("普通打包："),a("code",null,"java -cp xxx.jar:lib/* com.example.demo.DemoApplication"),l("，需要使用"),a("code",null,"-cp"),l("指定依赖包的位置。")]),a("li",null,[l("spring-boot-maven-plugin 打包："),a("code",null,"java -jar ***.jar"),l("，spring-boot-loader 会自动识别"),a("code",null,"BOOT-INF/lib"),l("下的依赖包。")])])],-1)])),"main-header":e(()=>[n(t.$slots,"main-header")]),"main-header-after":e(()=>[n(t.$slots,"main-header-after")]),"main-nav":e(()=>[n(t.$slots,"main-nav")]),"main-content-before":e(()=>[n(t.$slots,"main-content-before")]),"main-content":e(()=>[n(t.$slots,"main-content")]),"main-content-after":e(()=>[n(t.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(t.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(t.$slots,"main-nav-after")]),comment:e(()=>[n(t.$slots,"comment")]),footer:e(()=>[n(t.$slots,"footer")]),aside:e(()=>[n(t.$slots,"aside")]),"aside-custom":e(()=>[n(t.$slots,"aside-custom")]),default:e(()=>[n(t.$slots,"default")]),_:3},8,["frontmatter"])}}};export{w as default,y as usePageData};
