import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang.Pg5Jz43U.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as g,a as y,u as m}from"./chunks/vue-router.Dwv0D7Gx.js";import{X as b,b_ as e,bB as E,b3 as f,be as s,_ as l,a5 as t,b5 as x}from"./framework.BXq2oTmp.js";import"./app.BWzPgeMt.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.C6SnuJMS.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.CyDzanhc.js";const v=g("/jobs/question/java-util-concurrent",async a=>JSON.parse('{"title":"Java Util Concurrent","description":"","frontmatter":{"title":"Java Util Concurrent","title_zh":"Java 并发","date":"2025-04-11 15:27:24"},"headers":[],"relativePath":"pages/jobs/question/java-util-concurrent.md","lastUpdated":null}'),{lazy:(a,n)=>a.name===n.name}),P={__name:"java-util-concurrent",setup(a,{expose:n}){var d;const{data:h}=v(),k=m(),o=y(),r=Object.assign(o.meta.frontmatter||{},((d=h.value)==null?void 0:d.frontmatter)||{});return k.currentRoute.value.data=h.value,x("valaxy:frontmatter",r),globalThis.$frontmatter=r,n({frontmatter:{title:"Java Util Concurrent",title_zh:"Java 并发",date:"2025-04-11 15:27:24"}}),(i,u)=>{const c=p;return f(),b(c,{frontmatter:E(r)},{"main-content-md":e(()=>u[0]||(u[0]=[l("p",null,"并发编程允许程序同时执行多个任务，提高程序效率。Java 通过多线程实现并发。主要类和接口包括：",-1),l("ul",null,[l("li",null,[l("strong",null,"Thread 类"),t("：表示线程的类，通过继承 Thread 类来创建线程。")]),l("li",null,[l("strong",null,"Runnable 接口"),t("：表示任务的接口，通过实现 Runnable 接口来创建线程。")]),l("li",null,[l("strong",null,"Callable 接口"),t("：表示有返回值的任务的接口，通过实现 Callable 接口来创建线程。")]),l("li",null,[l("strong",null,"Executor 框架"),t("：用于管理线程池和任务调度，如 ExecutorService、ThreadPoolExecutor。")])],-1),l("hr",null,null,-1),l("details",{class:"details custom-block"},[l("summary",null,"volatile 关键字的作用是什么？"),l("p",null,"volatile 是 Java 提供的一种轻量级的同步机制，它具有两个特性：可见性和有序性。"),l("ul",null,[l("li",null,[t("可见性：volatile "),l("strong",null,"保证了线程间变量是可见的"),t("，即当一个线程修改了共享变量后，该变量会立马同步到主内存，其余线程监听到数据变化后会使得自己缓存的原数据失效，并触发 read 操作读取新修改的变量的值。")]),l("li",null,[t("有序性：volatile 保证了线程对变量的修改是有序的，即"),l("strong",null,"禁止指令重排序"),t("。 "),l("ul",null,[l("li",null,"当程序执行到 volatile 变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见，在其后面的操作肯定还没有进行。"),l("li",null,"在进行指令优化时，不能将在对 volatile 变量访问的语句放在其后面执行，也不能把 volatile 变量后面的语句放到其前面执行。")])]),l("li",null,[t("应用场景 "),l("ul",null,[l("li",null,[t("volatile 不能保证原子性，即"),l("strong",null,"不能保证"),t("多个线程同时修改一个变量时的"),l("strong",null,"线程安全性"),t("。")]),l("li",null,"volatile 不能代替锁，它只能保证可见性和有序性，不能保证原子性。"),l("li",null,"volatile 适用于一个线程写，多个线程读的场景。")])])])],-1),l("details",{class:"details custom-block"},[l("summary",null,"多线程的几种实现方式?"),l("ul",null,[l("li",null,"继承 Thread 类")]),l("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme line-numbers-mode"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyThread"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Thread"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    @"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," run"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"}),l("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br")])]),l("ul",null,[l("li",null,"实现 Runnable 接口")]),l("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme line-numbers-mode"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyRunnable"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," implements"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Runnable"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    @"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," run"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"}),l("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br")])]),l("ul",null,[l("li",null,"实现 Callable 接口")]),l("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme line-numbers-mode"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyCallable"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," implements"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Callable"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Integer"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    @"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Integer "),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"call"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"throws"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Exception {")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),l("button",{class:"collapse"}),l("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br")])]),l("ul",null,[l("li",null,"使用线程池")]),l("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme line-numbers-mode"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"java"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"ExecutorService executor "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Executors."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"newFixedThreadPool"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"10"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"executor."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"execute"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyRunnable"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"());")]),t(`
`),l("span",{class:"line"},[l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Future<"),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Integer"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> future "),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," executor."),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"submit"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),l("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),l("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," MyCallable"),l("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"());")])])]),l("button",{class:"collapse"}),l("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br")])])],-1),l("details",{class:"details custom-block"},[l("summary",null,"多线程实现方式的区别？"),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"方式"),l("th",{style:{"text-align":"left"}},"是否支持返回值"),l("th",{style:{"text-align":"left"}},"是否可复用"),l("th",{style:{"text-align":"left"}},"应用场景")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"left"}},"继承 Thread 类"),l("td",{style:{"text-align":"left"}},"不支持"),l("td",{style:{"text-align":"left"}},"不可复用"),l("td",{style:{"text-align":"left"}},"简单场景")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"实现 Runnable 接口"),l("td",{style:{"text-align":"left"}},"不支持"),l("td",{style:{"text-align":"left"}},"可复用"),l("td",{style:{"text-align":"left"}},"多线程共享资源")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"实现 Callable 接口"),l("td",{style:{"text-align":"left"}},"支持"),l("td",{style:{"text-align":"left"}},"可复用"),l("td",{style:{"text-align":"left"}},"需要返回值的任务")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"使用线程池"),l("td",{style:{"text-align":"left"}},"支持"),l("td",{style:{"text-align":"left"}},"可复用"),l("td",{style:{"text-align":"left"}},"高并发场景")])])])],-1),l("details",{class:"details custom-block"},[l("summary",null,"介绍一下线程安全的类"),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"类别"),l("th",{style:{"text-align":"left"}},"类名"),l("th",{style:{"text-align":"left"}},"说明")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"left"}},"基础类"),l("td",{style:{"text-align":"left"}},"String, StringBuffer, AtomicInteger"),l("td",{style:{"text-align":"left"}},"StringBuffer 使用了同步方法，线程安全")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"集合类"),l("td",{style:{"text-align":"left"}},"Vector, ConcurrentHashMap, CopyOnWriteArrayList"),l("td",{style:{"text-align":"left"}},"使用同步或锁机制保证线程安全")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"工具类"),l("td",{style:{"text-align":"left"}},"Collections.synchronizedList"),l("td",{style:{"text-align":"left"}},"通过包装实现线程安全的集合")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"Blocking 队列"),l("td",{style:{"text-align":"left"}},"LinkedBlockingQueue, ArrayBlockingQueue"),l("td",{style:{"text-align":"left"}},"支持生产者-消费者模型，线程安全")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"原子类"),l("td",{style:{"text-align":"left"}},"AtomicInteger, AtomicLong, AtomicReference"),l("td",{style:{"text-align":"left"}},"使用 CAS（Compare And Swap）实现原子操作")])])])],-1),l("h2",{id:"锁机制",tabindex:"-1"},[t("锁机制 "),l("a",{class:"header-anchor",href:"#锁机制","aria-label":'Permalink to "锁机制"'},"​")],-1),l("details",{class:"details custom-block"},[l("summary",null,"乐观锁与悲观锁的区别？"),l("ul",null,[l("li",null,[l("strong",null,"悲观锁基于悲观的假设，认为共享资源在每次访问时都会发生冲突，因此在每次操作时都会加锁。"),t(" 这种锁机制会导致其他线程阻塞，直到锁被释放。Java 中的 synchronized 和 ReentrantLock 是悲观锁的典型实现方式。 虽然悲观锁能有效避免数据竞争，但在高并发场景下会导致线程阻塞、上下文切换频繁，从而影响系统性能，并且还可能引发死锁问题。")]),l("li",null,[l("strong",null,"乐观锁基于乐观的假设，认为共享资源在每次访问时不会发生冲突，因此无须加锁，只需在提交修改时验证数据是否被其他线程修改。"),t(" Java 中的 AtomicInteger 和 LongAdder 等类通过 CAS（Compare-And-Swap）算法实现了乐观锁。 乐观锁避免了线程阻塞和死锁问题，在"),l("strong",null,"读多写少"),t("的场景中性能优越。但在写操作频繁的情况下，可能会导致大量重试和失败，从而影响性能。")])]),l("hr"),l("ul",null,[l("li",null,"著作权归JavaGuide(javaguide.cn)所有"),l("li",null,"基于MIT协议"),l("li",null,[t("原文链接："),l("a",{href:"https://javaguide.cn/java/concurrent/optimistic-lock-and-pessimistic-lock.html",target:"_blank",rel:"noreferrer"},"https://javaguide.cn/java/concurrent/optimistic-lock-and-pessimistic-lock.html")])])],-1),l("details",{class:"details custom-block"},[l("summary",null,"公平锁与非公平锁的区别？"),l("ul",null,[l("li",null,"公平锁：按照线程请求的顺序来获取锁，即先到先得。"),l("li",null,"非公平锁：不考虑线程请求的顺序，有可能后请求的线程先获取到锁。")])],-1),l("h3",{id:"cas-compare-and-swap",tabindex:"-1"},[t("CAS (Compare And Swap) "),l("a",{class:"header-anchor",href:"#cas-compare-and-swap","aria-label":'Permalink to "CAS (Compare And Swap)"'},"​")],-1),l("ul",null,[l("li",null,"定义：CAS 是一种乐观锁，通过比较当前值和期望值是否一样来决定是否更新。"),l("li",null,"相关类：AtomicInteger、AtomicLong、AtomicReference 等。"),l("li",null,"相关问题")],-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"问题"),l("th",{style:{"text-align":"left"}},"解决方案")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"left"}},"ABA 问题"),l("td",{style:{"text-align":"left"}},"使用版本号或时间戳解决，如 AtomicStampedReference")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"循环时间长开销大"),l("td",{style:{"text-align":"left"}},"限制重试次数，避免无限循环，如自旋锁")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"只能保证一个共享变量的原子操作"),l("td",{style:{"text-align":"left"}},"使用 AtomicReference 或加锁")])])],-1),l("hr",null,null,-1),l("blockquote",null,[l("p",null,"ABA 问题：线程 1 读取数据 A，线程 2 将 A 改为 B，再改回 A，线程 1 再次读取 A，认为 A 未变化。")],-1),l("h3",{id:"synchronized",tabindex:"-1"},[t("synchronized "),l("a",{class:"header-anchor",href:"#synchronized","aria-label":'Permalink to "synchronized"'},"​")],-1),l("ul",null,[l("li",null,"定义：synchronized 是一种悲观锁，通过获取锁来保证同一时刻只有一个线程执行。"),l("li",null,"特点：可重入、非公平锁、不可中断、性能高。"),l("li",null,"使用场景：适用于代码块同步、单例模式、简单场景。")],-1),l("h3",{id:"reentrantlock",tabindex:"-1"},[t("ReentrantLock "),l("a",{class:"header-anchor",href:"#reentrantlock","aria-label":'Permalink to "ReentrantLock"'},"​")],-1),l("ul",null,[l("li",null,"定义：ReentrantLock 是一种可重入锁，通过 AQS 实现。"),l("li",null,"特点：支持公平/非公平锁、可中断、超时获取。"),l("li",null,"使用场景：适用于复杂场景，如高并发、需要公平锁、可中断、超时获取或多个条件变量等场景。")],-1),l("hr",null,null,-1),l("details",{class:"details custom-block"},[l("summary",null,"synchronized 和 ReentrantLock 的区别，具体使用场景，注意事项？"),l("ul",null,[l("li",null,"区别")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"对比项"),l("th",{style:{"text-align":"left"}},"synchronized"),l("th",{style:{"text-align":"left"}},"ReentrantLock")])]),l("tbody",null,[l("tr",null,[l("td",{style:{"text-align":"left"}},"底层实现"),l("td",{style:{"text-align":"left"}},"JVM 内置，基于 Monitor"),l("td",{style:{"text-align":"left"}},"JDK 提供的 API，基于 AQS（AbstractQueuedSynchronizer）")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"锁类型"),l("td",{style:{"text-align":"left"}},"悲观锁，只能独占（排他锁）"),l("td",{style:{"text-align":"left"}},"支持公平/非公平锁、可中断、超时获取")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"可重入性"),l("td",{style:{"text-align":"left"}},"✅ 支持"),l("td",{style:{"text-align":"left"}},"✅ 支持")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"公平性"),l("td",{style:{"text-align":"left"}},"❌ 非公平"),l("td",{style:{"text-align":"left"}},"✅ 支持公平锁和非公平锁")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"锁的范围"),l("td",{style:{"text-align":"left"}},"作用在方法或代码块"),l("td",{style:{"text-align":"left"}},"灵活，作用于任意代码块")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"是否可中断"),l("td",{style:{"text-align":"left"}},"❌ 不可中断"),l("td",{style:{"text-align":"left"}},"✅ 可以中断 lockInterruptibly()")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"是否可超时"),l("td",{style:{"text-align":"left"}},"❌ 不支持超时获取锁"),l("td",{style:{"text-align":"left"}},"✅ tryLock(timeout) 支持超时等待")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"是否需要手动释放"),l("td",{style:{"text-align":"left"}},"❌ 自动释放（异常时也会释放）"),l("td",{style:{"text-align":"left"}},"✅ 需要 lock() 和 unlock() 手动释放")]),l("tr",null,[l("td",{style:{"text-align":"left"}},"性能"),l("td",{style:{"text-align":"left"}},"JVM 内部优化，性能高"),l("td",{style:{"text-align":"left"}},"适用于复杂场景，但开销稍大")])])]),l("ul",null,[l("li",null,[t("使用场景 "),l("ul",null,[l("li",null,"synchronized：适用于代码块同步，单例模式，简单场景下使用，性能较高。"),l("li",null,"ReentrantLock：适用于复杂场景，如高并发，需要公平锁、可中断、超时获取或多个条件变量等场景。")])]),l("li",null,[t("注意事项 "),l("ul",null,[l("li",null,"synchronized: 无需手动释放锁，异常时会自动释放锁，代码块优先级高于方法"),l("li",null,"ReentrantLock: 需要手动释放锁，finally 块中释放锁，条件变量不易过多使用，影响性能")])])])],-1),l("h2",{id:"线程池",tabindex:"-1"},[t("线程池 "),l("a",{class:"header-anchor",href:"#线程池","aria-label":'Permalink to "线程池"'},"​")],-1),l("h2",{id:"threadlocal",tabindex:"-1"},[t("ThreadLocal "),l("a",{class:"header-anchor",href:"#threadlocal","aria-label":'Permalink to "ThreadLocal"'},"​")],-1),l("h2",{id:"参考",tabindex:"-1"},[t("参考 "),l("a",{class:"header-anchor",href:"#参考","aria-label":'Permalink to "参考"'},"​")],-1),l("ul",null,[l("li",null,[l("a",{href:"https://mp.weixin.qq.com/s/NspUsyhEmKnJ-4OprRFp9g",target:"_blank",rel:"noreferrer"},"大家都说 Java 有三种创建线程的方式！并发编程中的惊天骗局！")])],-1)])),"main-header":e(()=>[s(i.$slots,"main-header")]),"main-header-after":e(()=>[s(i.$slots,"main-header-after")]),"main-nav":e(()=>[s(i.$slots,"main-nav")]),"main-content-before":e(()=>[s(i.$slots,"main-content-before")]),"main-content":e(()=>[s(i.$slots,"main-content")]),"main-content-after":e(()=>[s(i.$slots,"main-content-after")]),"main-nav-before":e(()=>[s(i.$slots,"main-nav-before")]),"main-nav-after":e(()=>[s(i.$slots,"main-nav-after")]),comment:e(()=>[s(i.$slots,"comment")]),footer:e(()=>[s(i.$slots,"footer")]),aside:e(()=>[s(i.$slots,"aside")]),"aside-custom":e(()=>[s(i.$slots,"aside-custom")]),default:e(()=>[s(i.$slots,"default")]),_:3},8,["frontmatter"])}}};export{P as default,v as usePageData};
