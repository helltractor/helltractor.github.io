import{_ as c}from"./ValaxyMain.vue_vue_type_script_setup_true_lang.B9ACoAgj.js";import"./chunks/nprogress.Do6qArWV.js";import{d as u,u as E,a as y}from"./chunks/vue-router.C_UGPTuO.js";import{a2 as f,a9 as t,W as m,a3 as D,a8 as n,a7 as s,aa as i,_ as A}from"./framework.BKlXavfA.js";import"./app.BTXeQvet.js";import"./chunks/dayjs.BeL6d4wv.js";import"./chunks/pinia.DlD3bL4k.js";import"./chunks/vue-i18n.DVmFIX_F.js";import"./content.BO4OOSBM.js";import"./router.C1axOHAx.js";const F=u("/posts/design-pattern/singleton",async e=>JSON.parse('{"title":"Singleton","description":"","frontmatter":{"title":"Singleton","title_zh":"单例模式","date":"2024-06-21","categories":"Program","tags":["Design Pattern"]},"headers":[],"relativePath":"pages/posts/design-pattern/singleton.md","lastUpdated":null}'),{lazy:(e,l)=>e.name===l.name}),z={__name:"singleton",setup(e,{expose:l}){var k;const{data:h}=F(),d=y(),g=E(),r=Object.assign(g.meta.frontmatter||{},((k=h.value)==null?void 0:k.frontmatter)||{});return d.currentRoute.value.data=h.value,A("valaxy:frontmatter",r),globalThis.$frontmatter=r,l({frontmatter:{title:"Singleton",title_zh:"单例模式",date:"2024-06-21",categories:"Program",tags:["Design Pattern"]}}),(a,p)=>{const o=c;return D(),f(o,{frontmatter:m(r)},{"main-content-md":t(()=>p[0]||(p[0]=[s("h2",{id:"定义",tabindex:"-1"},[i("定义 "),s("a",{class:"header-anchor",href:"#定义","aria-label":'Permalink to "定义"'},"​")],-1),s("p",null,"单例模式是一种常用的软件设计模式，它保证一个类只有一个实例，并提供一个全局访问点。这种模式通常用于需要频繁创建和销毁的对象，以减少系统资源的消耗，提高系统效率。",-1),s("ul",null,[s("li",null,"单例模式是一种创建型设计模式，它保证一个类只有一个实例，并提供一个全局访问点。"),s("li",null,"单例模式的优点是可以减少内存开销，提高性能，缺点是增加了代码的复杂度。"),s("li",null,"单例模式在实际开发中应用广泛，例如数据库连接池、线程池、日志对象等。"),s("li",null,"单例模式的线程安全问题是实现时需要考虑的重要问题，如果不考虑线程安全问题，可能会导致多个实例被创建。")],-1),s("h2",{id:"实现方法",tabindex:"-1"},[i("实现方法 "),s("a",{class:"header-anchor",href:"#实现方法","aria-label":'Permalink to "实现方法"'},"​")],-1),s("p",null,"单例模式的实现方式有很多种，其中最常见的是懒汉式和饿汉式。",-1),s("ul",null,[s("li",null,[s("strong",null,"懒汉式是指在第一次调用获取单例对象的方法时，才创建实例。"),i(" 懒汉式的实现方式有很多种，其中最常见的是双重检查锁和静态内部类。双重检查锁是指在同步块内进行两次 null 检查，以确保只有一个线程创建实例。静态内部类是指将实例化的过程放在一个静态内部类中，从而实现延迟加载。")]),s("li",null,[s("strong",null,"饿汉式是指在类加载时就创建实例。"),i(" 饿汉式的实现方式有很多种，其中最常见的是静态常量和静态代码块。静态常量是指直接创建实例并赋值给一个静态常量，从而实现在类加载时就创建实例。静态代码块是指在静态代码块中创建实例，也是在类加载时就创建实例。")])],-1),s("h3",{id:"饿汉式",tabindex:"-1"},[i("饿汉式 "),s("a",{class:"header-anchor",href:"#饿汉式","aria-label":'Permalink to "饿汉式"'},"​")],-1),s("p",null,"TODO",-1),s("h3",{id:"双重检验锁方式",tabindex:"-1"},[i("双重检验锁方式 "),s("a",{class:"header-anchor",href:"#双重检验锁方式","aria-label":'Permalink to "双重检验锁方式"'},"​")],-1),s("p",null,"双重检验锁方式实现单例模式是一种线程安全的实现方式。其原理是：第一次检查是否实例已经创建，如果尚未创建，才进行同步，这是第一重检查。然后在同步代码块中再次检查是否实例已经创建，如果尚未创建，才真正创建实例，这是第二重检查。这种方式既保证了线程安全，又比直接用 synchronized 关键字锁住创建实例的方法效率更高。",-1),s("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"java"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 使用volatile关键字保证了uniqueInstance变量的可见性，volatile关键字会强制将修改的值立即写入主存")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," volatile"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Singleton uniqueInstance;")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 构造函数私有化，防止外部创建实例")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 获取单例对象的方法")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Singleton "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getUniqueInstance"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 第一次检查实例是否已经被创建，如果尚未创建，才进入同步块")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (uniqueInstance "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // 使用类对象作为锁，这样可以保证在多线程环境下，只有一条线程能进入同步块，从而避免实例被多次创建")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            synchronized"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (Singleton.class) {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                // 进入同步块后，再检查一次。如果仍是null,才创建实例")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"                if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (uniqueInstance "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    uniqueInstance "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 返回单例对象")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," uniqueInstance;")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("h3",{id:"静态内部类方式",tabindex:"-1"},[i("静态内部类方式 "),s("a",{class:"header-anchor",href:"#静态内部类方式","aria-label":'Permalink to "静态内部类方式"'},"​")],-1),s("p",null,"静态内部类方式实现单例模式是一种线程安全的实现方式。其原理是：在静态内部类中创建实例，从而实现延迟加载。当外部类加载时，静态内部类并不会被加载，只有在调用 getInstance 方法时，才会加载静态内部类，从而创建实例。这种方式既保证了线程安全，又实现了延迟加载。 在这个代码中，getInstance 方法是同步的，这意味着在多线程环境下，只有一条线程能够进入这个方法，从而避免了多个实例被创建。但是，这种方式的缺点是每次调用 getInstance 方法时都需要进行同步，这会影响性能。",-1),s("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"java"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," class"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 唯一的单例对象实例，初始时为null")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Singleton instance;")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 私有的构造函数，防止外部通过new创建实例")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 获取单例对象的方法")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," static"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," synchronized"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Singleton "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getInstance"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 如果单例对象还未创建，就创建一个新的实例")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (instance "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            instance "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Singleton"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 返回单例对象")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," instance;")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),s("button",{class:"collapse"})],-1),s("h2",{id:"参考",tabindex:"-1"},[i("参考 "),s("a",{class:"header-anchor",href:"#参考","aria-label":'Permalink to "参考"'},"​")],-1),s("table",{style:{"text-align":"center","border-collapse":"collapse",width:"100%"}},[s("tbody",null,[s("tr",null,[s("th",{width:"25%"},[s("a",{href:"https://refactoringguru.cn/design-patterns/creational-patterns"},"创建型模式")]),s("th",{width:"25%"},[s("a",{href:"https://refactoringguru.cn/design-patterns/structural-patterns"},"结构型模式")]),s("th",{width:"50%",colspan:"2"},[s("a",{href:"https://refactoringguru.cn/design-patterns/behavioral-patterns"},"行为模式")])]),s("tr",null,[s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/factory-method"},"工厂方法（Factory Method）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/adapter"},"适配器（Adapter）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility"},"责任链（Chain of Responsibility）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/command"},"命令（Command）")])]),s("tr",null,[s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/abstract-factory"},"抽象工厂（Abstract Factory）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/bridge"},"桥接（Bridge）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/iterator"},"迭代器（Iterator）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/mediator"},"中介者（Mediator）")])]),s("tr",null,[s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/builder"},"生成器（Builder）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/composite"},"组合（Composite）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/memento"},"备忘录（Memento）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/visitor"},"访问者（Visitor）")])]),s("tr",null,[s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/prototype"},"原型（Prototype）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/decorator"},"装饰（Decorator）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/observer"},"观察者（Observer）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/state"},"状态（State）")])]),s("tr",null,[s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/singleton"},"单例（Singleton）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/facade"},"外观（Facade）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/strategy"},"策略（Strategy）")]),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/template-method"},"模板方法（Template Method）")])]),s("tr",null,[s("td"),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/flyweight"},"享元（Flyweight）")]),s("td"),s("td")]),s("tr",null,[s("td"),s("td",null,[s("a",{href:"https://refactoringguru.cn/design-patterns/proxy"},"代理（Proxy）")]),s("td"),s("td")])])],-1)])),"main-header":t(()=>[n(a.$slots,"main-header")]),"main-header-after":t(()=>[n(a.$slots,"main-header-after")]),"main-nav":t(()=>[n(a.$slots,"main-nav")]),"main-content-before":t(()=>[n(a.$slots,"main-content-before")]),"main-content":t(()=>[n(a.$slots,"main-content")]),"main-content-after":t(()=>[n(a.$slots,"main-content-after")]),"main-nav-before":t(()=>[n(a.$slots,"main-nav-before")]),"main-nav-after":t(()=>[n(a.$slots,"main-nav-after")]),comment:t(()=>[n(a.$slots,"comment")]),footer:t(()=>[n(a.$slots,"footer")]),aside:t(()=>[n(a.$slots,"aside")]),"aside-custom":t(()=>[n(a.$slots,"aside-custom")]),default:t(()=>[n(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{z as default,F as usePageData};
