import{_ as p}from"./ValaxyMain.vue_vue_type_style_index_0_lang.CwGK2QKz.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as f,a as g,u as b}from"./chunks/vue-router.DbYl_Vni.js";import{X as k,b_ as a,be as n,_ as e,a5 as t,bB as v,b3 as y,b5 as P}from"./framework.BXq2oTmp.js";import"./app.DaEmrGxP.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.BQ4Fe32A.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.BW-oy4du.js";const x=f("/posts/java/knowledge",async r=>JSON.parse('{"title":"Java 小芝士","description":"","frontmatter":{"title":"Java 小芝士","date":"2024-06-21","categories":"Program","tags":["Java","Knowledge"]},"headers":[],"relativePath":"pages/posts/java/knowledge.md","lastUpdated":null}'),{lazy:(r,i)=>r.name===i.name}),O={__name:"knowledge",setup(r,{expose:i}){var d;const{data:s}=x(),u=b(),m=g(),o=Object.assign(m.meta.frontmatter||{},((d=s.value)==null?void 0:d.frontmatter)||{});return u.currentRoute.value.data=s.value,P("valaxy:frontmatter",o),globalThis.$frontmatter=o,i({frontmatter:{title:"Java 小芝士",date:"2024-06-21",categories:"Program",tags:["Java","Knowledge"]}}),(l,c)=>{const h=p;return y(),k(h,{frontmatter:v(o)},{"main-content-md":a(()=>c[0]||(c[0]=[e("h2",{id:"annotation",tabindex:"-1"},[t("Annotation "),e("a",{class:"header-anchor",href:"#annotation","aria-label":'Permalink to "Annotation"'},"​")],-1),e("h3",{id:"value",tabindex:"-1"},[t("@Value "),e("a",{class:"header-anchor",href:"#value","aria-label":'Permalink to "@Value"'},"​")],-1),e("p",null,"在 Spring 框架中，@Value 注解用于注入属性值。@Value 可以接受两种形式的参数：${}和#{}，它们的区别在于：",-1),e("ul",null,[e("li",null,[e("code",null,"${}"),t('：用于获取外部配置文件（如 application.properties 或 application.yml）中的属性值。例如，@Value("${server.port}") 会获取配置文件中 server.port 的值。')]),e("li",null,[e("code",null,"#{}"),t(`：用于执行 Spring 表达式语言（SpEL）。SpEL 是一种强大的表达式语言，支持在运行时查询和操作对象图。例如，@Value(" #{systemProperties['java.home']}")会获取 Java 的安装目录。`)])],-1),e("p",null,"所以，如果你只是想从配置文件中获取一个值，那么使用${}就足够了。如果你需要更复杂的操作，如调用方法、访问对象属性、计算表达式等，那么你应该使用#{}。",-1),e("h3",{id:"lombok-builder",tabindex:"-1"},[t("@lombok.Builder "),e("a",{class:"header-anchor",href:"#lombok-builder","aria-label":'Permalink to "@lombok.Builder"'},"​")],-1),e("ul",null,[e("li",null,[e("a",{href:"https://www.cnblogs.com/MrYuChen-Blog/p/13993196.html",target:"_blank",rel:"noreferrer"},"Lombok 之@Builder 注解")])],-1),e("h2",{id:"skills",tabindex:"-1"},[t("Skills "),e("a",{class:"header-anchor",href:"#skills","aria-label":'Permalink to "Skills"'},"​")],-1),e("h3",{id:"停止在特定端口上运行的服务",tabindex:"-1"},[t("停止在特定端口上运行的服务 "),e("a",{class:"header-anchor",href:"#停止在特定端口上运行的服务","aria-label":'Permalink to "停止在特定端口上运行的服务"'},"​")],-1),e("ul",null,[e("li",null,[t("找到特定端口上运行的进程的 PID："),e("code",null,"netstat -ano | findstr 8080")]),e("li",null,[t("停止特定 PID 的进程："),e("code",null,"taskkill /F /PID 1234"),t(" 或 "),e("code",null,"taskkill /PID 1234 /F")])],-1),e("blockquote",null,[e("p",null,"Mind: 8080 是端口号，1234 是进程 ID。这些命令需要在命令行中运行，并且可能需要管理员权限。")],-1),e("h2",{id:"base-knowledge",tabindex:"-1"},[t("Base Knowledge "),e("a",{class:"header-anchor",href:"#base-knowledge","aria-label":'Permalink to "Base Knowledge"'},"​")],-1),e("h3",{id:"访问权限修饰符-access-modifiers",tabindex:"-1"},[t("访问权限修饰符（Access Modifiers） "),e("a",{class:"header-anchor",href:"#访问权限修饰符-access-modifiers","aria-label":'Permalink to "访问权限修饰符（Access Modifiers）"'},"​")],-1),e("p",null,"在 Java 中，访问修饰符用于设置类、方法和变量的可见性。Java 有四种访问修饰符：",-1),e("ul",null,[e("li",null,[e("code",null,"public"),t("：公共的，任何类都可以访问。")]),e("li",null,[e("code",null,"protected"),t("：受保护的，只有在同一个包中的类或者是这个类的子类以及子类的子类可以访问。")]),e("li",null,[e("code",null,"default"),t("（没有关键字）：默认的，只有在同一个包中的类可以访问。")]),e("li",null,[e("code",null,"private"),t("：私有的，只有在这个类内部可以访问。")])],-1),e("h3",{id:"面向对象设计的原则",tabindex:"-1"},[t("面向对象设计的原则 "),e("a",{class:"header-anchor",href:"#面向对象设计的原则","aria-label":'Permalink to "面向对象设计的原则"'},"​")],-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"原则"),e("th",{style:{"text-align":"center"}},"英文"),e("th",{style:{"text-align":"left"}},"描述")])]),e("tbody",null,[e("tr",null,[e("td",{style:{"text-align":"center"}},"单一职责原则（SRP）"),e("td",{style:{"text-align":"center"}},"Single Responsibility Principle"),e("td",{style:{"text-align":"left"}},"一个类只负责一个功能")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"开闭原则（OCP）"),e("td",{style:{"text-align":"center"}},"Open/Closed Principle"),e("td",{style:{"text-align":"left"}},"对扩展开放，对修改关闭")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"里氏替换原则（LSP）"),e("td",{style:{"text-align":"center"}},"Liskov Substitution Principle"),e("td",{style:{"text-align":"left"}},"子类可以替换父类")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"依赖倒置原则（DIP）"),e("td",{style:{"text-align":"center"}},"Dependency Inversion Principle"),e("td",{style:{"text-align":"left"}},"高层模块不应该依赖底层模块，两者都应该依赖抽象")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"接口隔离原则（ISP）"),e("td",{style:{"text-align":"center"}},"Interface Segregation Principle"),e("td",{style:{"text-align":"left"}},"使用多个专门的接口，而不是一个总接口")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"最少知识原则/迪米特法则（LKP）"),e("td",{style:{"text-align":"center"}},"Least Knowledge Principle/Law of Demeter"),e("td",{style:{"text-align":"left"}},"一个对象应该对其他对象有最少的了解")])])],-1),e("h2",{id:"thread",tabindex:"-1"},[t("Thread "),e("a",{class:"header-anchor",href:"#thread","aria-label":'Permalink to "Thread"'},"​")],-1),e("h3",{id:"create-thread",tabindex:"-1"},[t("Create Thread "),e("a",{class:"header-anchor",href:"#create-thread","aria-label":'Permalink to "Create Thread"'},"​")],-1),e("ul",null,[e("li",null,[e("a",{href:"https://mp.weixin.qq.com/s/NspUsyhEmKnJ-4OprRFp9g",target:"_blank",rel:"noreferrer"},"大家都说 Java 有三种创建线程的方式！并发编程中的惊天骗局！")])],-1)])),"main-header":a(()=>[n(l.$slots,"main-header")]),"main-header-after":a(()=>[n(l.$slots,"main-header-after")]),"main-nav":a(()=>[n(l.$slots,"main-nav")]),"main-content-before":a(()=>[n(l.$slots,"main-content-before")]),"main-content":a(()=>[n(l.$slots,"main-content")]),"main-content-after":a(()=>[n(l.$slots,"main-content-after")]),"main-nav-before":a(()=>[n(l.$slots,"main-nav-before")]),"main-nav-after":a(()=>[n(l.$slots,"main-nav-after")]),comment:a(()=>[n(l.$slots,"comment")]),footer:a(()=>[n(l.$slots,"footer")]),aside:a(()=>[n(l.$slots,"aside")]),"aside-custom":a(()=>[n(l.$slots,"aside-custom")]),default:a(()=>[n(l.$slots,"default")]),_:3},8,["frontmatter"])}}};export{O as default,x as usePageData};
