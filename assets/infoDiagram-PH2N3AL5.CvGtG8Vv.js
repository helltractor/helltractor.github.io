import{_ as a,l as o,K as p,e as s,L as n}from"./mermaid.core.BXb9f187.js";import{p as m}from"./radar-MK3ICKWK.xtTQEA9N.js";import"./framework.BKlXavfA.js";import"./chunks/dayjs.BeL6d4wv.js";import"./memoize.ZhIyPiLK.js";import"./isArray.CVnqMxe5.js";import"./marked.esm.D3VogUXu.js";import"./_baseUniq.CzemtK3J.js";import"./toString.BS--fxLY.js";import"./_arrayReduce.CrxnWFSq.js";import"./get.DUr0ZkAG.js";import"./_basePickBy.COjLZWyf.js";import"./toNumber.COTyaoZx.js";import"./clone.C-NMQ-k8.js";var g={parse:a(async r=>{const t=await m("info",r);o.debug(t)},"parse")},v={version:n.version},d=a(()=>v.version,"getVersion"),c={getVersion:d},l=a((r,t,i)=>{o.debug(`rendering info diagram
`+r);const e=p(t);s(e,100,400,!0),e.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${i}`)},"draw"),f={draw:l},A={parser:g,db:c,renderer:f};export{A as diagram};
