import{_ as m}from"./ValaxyMain.vue_vue_type_style_index_0_lang.CwGK2QKz.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as b,a as f,u as p}from"./chunks/vue-router.DbYl_Vni.js";import{X as y,b_ as e,be as a,_ as l,a5 as t,bB as C,b3 as w,b5 as G}from"./framework.BXq2oTmp.js";import"./app.DaEmrGxP.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.BQ4Fe32A.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.BW-oy4du.js";const k=b("/posts/use/git-cheat-sheet",async o=>JSON.parse('{"title":"Git Cheat Sheet","description":"","frontmatter":{"title":"Git Cheat Sheet","date":"2024-08-05 19:06:19","categories":"Program","tags":["Git"]},"headers":[],"relativePath":"pages/posts/use/git-cheat-sheet.md","lastUpdated":null}'),{lazy:(o,i)=>o.name===i.name}),T={__name:"git-cheat-sheet",setup(o,{expose:i}){var d;const{data:u}=k(),s=p(),h=f(),r=Object.assign(h.meta.frontmatter||{},((d=u.value)==null?void 0:d.frontmatter)||{});return s.currentRoute.value.data=u.value,G("valaxy:frontmatter",r),globalThis.$frontmatter=r,i({frontmatter:{title:"Git Cheat Sheet",date:"2024-08-05 19:06:19",categories:"Program",tags:["Git"]}}),(n,c)=>{const g=m;return w(),y(g,{frontmatter:C(r)},{"main-content-md":e(()=>c[0]||(c[0]=[l("blockquote",null,[l("p",null,[l("a",{href:"https://liaoxuefeng.com/books/git/conclusion/git-cheat-sheet.pdf",target:"_blank",rel:"noreferrer"},"Git Cheat Sheet")])],-1),l("div",{lang:"zh-CN"},[l("h2",{lang:"zh-CN",id:"git-basics",tabindex:"-1"},[t("Git Basics "),l("a",{class:"header-anchor",href:"#git-basics","aria-label":'Permalink to "Git Basics {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git init <directory>")]),l("td",null,"在指定的目录下创建一个空的git repo。不带参数将在当前目录下创建一个git repo。")]),l("tr",null,[l("td",null,[l("code",null,"git clone <repo>")]),l("td",null,"克隆一个指定repo到本地。指定的repo可以是本地文件系统或者由HTTP或SSH指定的远程路径。")]),l("tr",null,[l("td",null,[l("code",null,"git config user.name <name>")]),l("td",null,"针对当前repo配置用户名。使用–global参数将配置全局用户名。")]),l("tr",null,[l("td",null,[l("code",null,"git add <directory>")]),l("td",null,[t("将指定目录的所有修改加入到下一次commit中。把"),l("code",null,"<directory>"),t("替换成"),l("code",null,"<file>"),t("将添加指定文件的修改。")])]),l("tr",null,[l("td",null,[l("code",null,'git commit -m "<message>"')]),l("td",null,[t("提交暂存区的修改，使用指定的"),l("code",null,"<message>"),t("作为提交信息，而不是打开文本编辑器输入提交信息。")])]),l("tr",null,[l("td",null,[l("code",null,"git status")]),l("td",null,"显示哪些文件已被staged、未被staged以及未跟踪(untracked)。")]),l("tr",null,[l("td",null,[l("code",null,"git log")]),l("td",null,"以缺省格式显示全部commit历史。更多自定义参数请参考后续部分。")])])]),l("h2",{lang:"zh-CN",id:"git-diff",tabindex:"-1"},[t("Git Diff "),l("a",{class:"header-anchor",href:"#git-diff","aria-label":'Permalink to "Git Diff {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git diff")]),l("td",null,"比较工作区和暂存区的修改。")]),l("tr",null,[l("td",null,[l("code",null,"git diff HEAD")]),l("td",null,"比较工作区和上一次commit后的修改。")]),l("tr",null,[l("td",null,[l("code",null,"git diff --cached")]),l("td",null,"比较暂存区和上一次commit后的修改。")])])]),l("h2",{lang:"zh-CN",id:"undoing-changes",tabindex:"-1"},[t("Undoing Changes "),l("a",{class:"header-anchor",href:"#undoing-changes","aria-label":'Permalink to "Undoing Changes {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git revert <commit>")]),l("td",null,[t("对指定"),l("code",null,"<commit>"),t("创建一个undo的commit，并应用到当前分支。")])]),l("tr",null,[l("td",null,[l("code",null,"git reset <file>")]),l("td",null,[t("将"),l("code",null,"<file>"),t("从暂存区移除，但保持工作区不变。此操作不会修改工作区的任何文件。")])])])]),l("h2",{lang:"zh-CN",id:"rewriting-git-history",tabindex:"-1"},[t("Rewriting Git History "),l("a",{class:"header-anchor",href:"#rewriting-git-history","aria-label":'Permalink to "Rewriting Git History {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git commit -m <message> --amend")]),l("td",null,"将当前staged修改合并到最近一次的commit中。")]),l("tr",null,[l("td",null,[l("code",null,"git rebase <base>")]),l("td",null,[t("基于"),l("code",null,"<base>"),t("对当前分支进行rebase。"),l("code",null,"<base>"),t("可以是commit、分支名称、tag或相对于HEAD的commit。")])]),l("tr",null,[l("td",null,[l("code",null,"git reflog")]),l("td",null,"显示本地repo的所有commit日志。")])])]),l("h2",{lang:"zh-CN",id:"git-branches",tabindex:"-1"},[t("Git Branches "),l("a",{class:"header-anchor",href:"#git-branches","aria-label":'Permalink to "Git Branches {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git branch")]),l("td",null,"显示本地repo的所有分支。")]),l("tr",null,[l("td",null,[l("code",null,"git switch -c <branch>")]),l("td",null,[t("创建并切换到一个新的名为"),l("code",null,"<branch>"),t("的分支。去掉-c参数将切换到一个已有分支。")])]),l("tr",null,[l("td",null,[l("code",null,"git merge <branch>")]),l("td",null,[t("将指定"),l("code",null,"<branch>"),t("分支合并到当前分支。")])])])]),l("h2",{lang:"zh-CN",id:"remote-repositories",tabindex:"-1"},[t("Remote Repositories "),l("a",{class:"header-anchor",href:"#remote-repositories","aria-label":'Permalink to "Remote Repositories {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git remote add <name> <url>")]),l("td",null,[t("添加一个新的远程连接。添加后可使用"),l("code",null,"<name>"),t("作为指定"),l("code",null,"<url>"),t("远程连接的名称。")])]),l("tr",null,[l("td",null,[l("code",null,"git fetch <remote> <branch>")]),l("td",null,[t("从指定"),l("code",null,"<remote>"),t("抓取指定"),l("code",null,"<branch>"),t("的所有commit到本地repo。去掉"),l("code",null,"<branch>"),t("将抓取远程所有分支的修改。")])]),l("tr",null,[l("td",null,[l("code",null,"git pull <remote>")]),l("td",null,[t("从指定"),l("code",null,"<remote>"),t("抓取所有分支的commit并立刻合并到本地repo。")])]),l("tr",null,[l("td",null,[l("code",null,"git push <remote> <branch>")]),l("td",null,[t("将本地指定"),l("code",null,"<branch>"),t("推送到指定远程"),l("code",null,"<remote>"),t("。如果远程没有对应的分支，将自动在远程创建此分支。")])])])]),l("h2",{lang:"zh-CN",id:"git-config",tabindex:"-1"},[t("Git Config "),l("a",{class:"header-anchor",href:"#git-config","aria-label":'Permalink to "Git Config {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git config --global user.name <name>")]),l("td",null,"配置当前用户名，使用–global参数将针对当前系统登录用户生效。")]),l("tr",null,[l("td",null,[l("code",null,"git config --global user.email <email>")]),l("td",null,"配置当前用户Email。")]),l("tr",null,[l("td",null,[l("code",null,"git config --global alias.<alias-name> <git-command>")]),l("td",null,"配置一个git命令的快捷方式。例如：配置”alias.glog log --graph --oneline”使”git glog”相当于”git log --graph --oneline”。")]),l("tr",null,[l("td",null,[l("code",null,"git config --system core.editor <editor>")]),l("td",null,"配置文本编辑器，例如vi，在必要时自动打开此文本编辑器。")]),l("tr",null,[l("td",null,[l("code",null,"git config --global --edit")]),l("td",null,"打开当前用户的git全局配置并编辑。")])])]),l("h2",{lang:"zh-CN",id:"git-log",tabindex:"-1"},[t("Git Log "),l("a",{class:"header-anchor",href:"#git-log","aria-label":'Permalink to "Git Log {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git log -<limit>")]),l("td",null,"限制log的显示数量。例如：”git log -5”仅显示最新5条commit。")]),l("tr",null,[l("td",null,[l("code",null,"git log --oneline")]),l("td",null,"每行显示一条commit。")]),l("tr",null,[l("td",null,[l("code",null,'git log --author="<pattern>"')]),l("td",null,"按提交者名字搜索并显示commit。")]),l("tr",null,[l("td",null,[l("code",null,'git log --grep="<pattern>"')]),l("td",null,"按指定内容搜索并显示commit。")]),l("tr",null,[l("td",null,[l("code",null,"git log <since>..<until>")]),l("td",null,"显示指定范围的commit。范围参数可以是commit ID、分支名称、HEAD或任意相对位置。")]),l("tr",null,[l("td",null,[l("code",null,"git log -- <file>")]),l("td",null,"仅显示包含指定文件修改的commit。")]),l("tr",null,[l("td",null,[l("code",null,"git log --graph")]),l("td",null,"使用–graph参数显示图形化的branch信息。")])])]),l("h2",{lang:"zh-CN",id:"git-reset",tabindex:"-1"},[t("Git Reset "),l("a",{class:"header-anchor",href:"#git-reset","aria-label":'Permalink to "Git Reset {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git reset")]),l("td",null,"移除所有暂存区的修改，但不会修改工作区。")]),l("tr",null,[l("td",null,[l("code",null,"git reset --hard")]),l("td",null,"移除所有暂存区的修改，并强制删除所有工作区的修改。")]),l("tr",null,[l("td",null,[l("code",null,"git reset <commit>")]),l("td",null,[t("将当前分支回滚到指定"),l("code",null,"<commit>"),t("，清除暂存区的修改，但保持工作区状态不变。")])]),l("tr",null,[l("td",null,[l("code",null,"git reset --hard <commit>")]),l("td",null,[t("将当前分支回滚到指定"),l("code",null,"<commit>"),t("，清除暂存区的修改，并强制删除所有工作区的修改。")])])])]),l("h2",{lang:"zh-CN",id:"git-rebase",tabindex:"-1"},[t("Git Rebase "),l("a",{class:"header-anchor",href:"#git-rebase","aria-label":'Permalink to "Git Rebase {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git rebase -i <base>")]),l("td",null,"以交互模式对当前分支做rebase。")])])]),l("h2",{lang:"zh-CN",id:"git-pull",tabindex:"-1"},[t("Git Pull "),l("a",{class:"header-anchor",href:"#git-pull","aria-label":'Permalink to "Git Pull {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git pull --rebase <remote>")]),l("td",null,"抓取所有远程分支，并以rebase模式并入本地repo而不是merge。")])])]),l("h2",{lang:"zh-CN",id:"git-push",tabindex:"-1"},[t("Git Push "),l("a",{class:"header-anchor",href:"#git-push","aria-label":'Permalink to "Git Push {lang=zh-CN}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"命令"),l("th",null,"说明")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git push <remote> --force")]),l("td",null,"将本地分支推送到远程。不要使用–force参数，除非你完全明白此操作的后果。")]),l("tr",null,[l("td",null,[l("code",null,"git push <remote> --tags")]),l("td",null,"使用push命令并不会自动将本地tag推送到远程。加上–tags参数会将所有本地tag推送到远程。")])])])],-1),l("div",{lang:"en"},[l("h2",{lang:"en",id:"git-basics-1",tabindex:"-1"},[t("Git Basics "),l("a",{class:"header-anchor",href:"#git-basics-1","aria-label":'Permalink to "Git Basics {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git init <directory>")]),l("td",null,"Create empty Git repo in specified directory. Run with no arguments to initialize the current directory as a git repository.")]),l("tr",null,[l("td",null,[l("code",null,"git clone <repo>")]),l("td",null,[t("Clone repo located at "),l("code",null,"<repo>"),t(" onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH.")])]),l("tr",null,[l("td",null,[l("code",null,"git config user.name <name>")]),l("td",null,"Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user.")]),l("tr",null,[l("td",null,[l("code",null,"git add <directory>")]),l("td",null,[t("Stage all changes in "),l("code",null,"<directory>"),t(" for the next commit. Replace "),l("code",null,"<directory>"),t(" with a "),l("code",null,"<file>"),t(" to change a specific file.")])]),l("tr",null,[l("td",null,[l("code",null,'git commit -m "<message>"')]),l("td",null,[t("Commit the staged snapshot, but instead of launching a text editor, use "),l("code",null,"<message>"),t(" as the commit message.")])]),l("tr",null,[l("td",null,[l("code",null,"git status")]),l("td",null,"List which files are staged, unstaged, and untracked.")]),l("tr",null,[l("td",null,[l("code",null,"git log")]),l("td",null,"Display the entire commit history using the default format. For customization see additional options.")])])]),l("h2",{lang:"en",id:"git-diff-1",tabindex:"-1"},[t("Git Diff "),l("a",{class:"header-anchor",href:"#git-diff-1","aria-label":'Permalink to "Git Diff {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git diff")]),l("td",null,"Show unstaged changes between your index and working directory.")]),l("tr",null,[l("td",null,[l("code",null,"git diff HEAD")]),l("td",null,"Show difference between working directory and last commit.")]),l("tr",null,[l("td",null,[l("code",null,"git diff --cached")]),l("td",null,"Show difference between staged changes and last commit.")])])]),l("h2",{lang:"en",id:"undoing-changes-1",tabindex:"-1"},[t("Undoing Changes "),l("a",{class:"header-anchor",href:"#undoing-changes-1","aria-label":'Permalink to "Undoing Changes {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git revert <commit>")]),l("td",null,[t("Create new commit that undoes all of the changes made in "),l("code",null,"<commit>"),t(", then apply it to the current branch.")])]),l("tr",null,[l("td",null,[l("code",null,"git reset <file>")]),l("td",null,[t("Remove "),l("code",null,"<file>"),t(" from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes.")])])])]),l("h2",{lang:"en",id:"rewriting-git-history-1",tabindex:"-1"},[t("Rewriting Git History "),l("a",{class:"header-anchor",href:"#rewriting-git-history-1","aria-label":'Permalink to "Rewriting Git History {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git commit -m <message> --amend")]),l("td",null,"Replace the last commit with the staged changes and last commit combined.")]),l("tr",null,[l("td",null,[l("code",null,"git rebase <base>")]),l("td",null,[t("Rebase the current branch onto "),l("code",null,"<base>"),t(". "),l("code",null,"<base>"),t(" can be a commit ID, branch name, a tag, or a relative reference to HEAD.")])]),l("tr",null,[l("td",null,[l("code",null,"git reflog")]),l("td",null,"Show a log of changes to the local repository’s HEAD.")])])]),l("h2",{lang:"en",id:"git-branches-1",tabindex:"-1"},[t("Git Branches "),l("a",{class:"header-anchor",href:"#git-branches-1","aria-label":'Permalink to "Git Branches {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git branch")]),l("td",null,"List all of the branches in your repo.")]),l("tr",null,[l("td",null,[l("code",null,"git switch -c <branch>")]),l("td",null,[t("Create and switch to a new branch named "),l("code",null,"<branch>"),t(". Drop the -c flag to switch to an existing branch.")])]),l("tr",null,[l("td",null,[l("code",null,"git merge <branch>")]),l("td",null,[t("Merge "),l("code",null,"<branch>"),t(" into the current branch.")])])])]),l("h2",{lang:"en",id:"remote-repositories-1",tabindex:"-1"},[t("Remote Repositories "),l("a",{class:"header-anchor",href:"#remote-repositories-1","aria-label":'Permalink to "Remote Repositories {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git remote add <name> <url>")]),l("td",null,[t("Create a new connection to a remote repo. After adding a remote, you can use "),l("code",null,"<name>"),t(" as a shortcut for "),l("code",null,"<url>"),t(" in other commands.")])]),l("tr",null,[l("td",null,[l("code",null,"git fetch <remote> <branch>")]),l("td",null,[t("Fetches a specific "),l("code",null,"<branch>"),t(", from the repo. Leave off "),l("code",null,"<branch>"),t(" to fetch all remote refs.")])]),l("tr",null,[l("td",null,[l("code",null,"git pull <remote>")]),l("td",null,"Fetch the specified remote’s copy of current branch and immediately merge it into the local copy.")]),l("tr",null,[l("td",null,[l("code",null,"git push <remote> <branch>")]),l("td",null,[t("Push the branch to "),l("code",null,"<remote>"),t(", along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist.")])])])]),l("h2",{lang:"en",id:"git-config-1",tabindex:"-1"},[t("Git Config "),l("a",{class:"header-anchor",href:"#git-config-1","aria-label":'Permalink to "Git Config {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git config --global user.name <name>")]),l("td",null,"Define the author name to be used for all commits by the current user.")]),l("tr",null,[l("td",null,[l("code",null,"git config --global user.email <email>")]),l("td",null,"Define the author email to be used for all commits by the current user.")]),l("tr",null,[l("td",null,[l("code",null,"git config --global alias.<alias-name> <git-command>")]),l("td",null,"Create shortcut for a Git command. E.g. alias.glog “log --graph --oneline” will set ”git glog”equivalent to ”git log --graph --oneline.")]),l("tr",null,[l("td",null,[l("code",null,"git config --system core.editor <editor>")]),l("td",null,[t("Set text editor used by commands for all users on the machine. "),l("code",null,"<editor>"),t(" arg should be the command that launches the desired editor (e.g., vi).")])]),l("tr",null,[l("td",null,[l("code",null,"git config --global --edit")]),l("td",null,"Open the global configuration file in a text editor for manual editing.")])])]),l("h2",{lang:"en",id:"git-log-1",tabindex:"-1"},[t("Git Log "),l("a",{class:"header-anchor",href:"#git-log-1","aria-label":'Permalink to "Git Log {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git log -<limit>")]),l("td",null,[t("Limit number of commits by "),l("code",null,"<limit>"),t(". E.g. ”git log -5” will limit to 5 commits.")])]),l("tr",null,[l("td",null,[l("code",null,"git log --oneline")]),l("td",null,"Condense each commit to a single line.")]),l("tr",null,[l("td",null,[l("code",null,'git log --author="<pattern>"')]),l("td",null,"Search for commits by a particular author.")]),l("tr",null,[l("td",null,[l("code",null,'git log --grep="<pattern>"')]),l("td",null,[t("Search for commits with a commit message that matches "),l("code",null,"<pattern>"),t(".")])]),l("tr",null,[l("td",null,[l("code",null,"git log <since>..<until>")]),l("td",null,[t("Show commits that occur between "),l("code",null,"<since>"),t(" and "),l("code",null,"<until>"),t(".` Args can be a commit ID, branch name, HEAD, or any other kind of revision reference.")])]),l("tr",null,[l("td",null,[l("code",null,"git log -- <file>")]),l("td",null,"Only display commits that have the specified file.")]),l("tr",null,[l("td",null,[l("code",null,"git log --graph")]),l("td",null,"–graph flag draws a text-based graph of commits on left side of commit msgs.")])])]),l("h2",{lang:"en",id:"git-reset-1",tabindex:"-1"},[t("Git Reset "),l("a",{class:"header-anchor",href:"#git-reset-1","aria-label":'Permalink to "Git Reset {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git reset")]),l("td",null,"Reset staging area to match most recent commit, but leave the working directory unchanged.")]),l("tr",null,[l("td",null,[l("code",null,"git reset --hard")]),l("td",null,"Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory.")]),l("tr",null,[l("td",null,[l("code",null,"git reset <commit>")]),l("td",null,[t("Move the current branch tip backward to "),l("code",null,"<commit>"),t(", reset the staging area to match, but leave the working directory alone.")])]),l("tr",null,[l("td",null,[l("code",null,"git reset --hard <commit>")]),l("td",null,[t("Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after "),l("code",null,"<commit>"),t(".")])])])]),l("h2",{lang:"en",id:"git-rebase-1",tabindex:"-1"},[t("Git Rebase "),l("a",{class:"header-anchor",href:"#git-rebase-1","aria-label":'Permalink to "Git Rebase {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git rebase -i <base>")]),l("td",null,[t("Interactively rebase current branch onto "),l("code",null,"<base>"),t(". Launches editor to enter commands for how each commit will be transferred to the new base.")])])])]),l("h2",{lang:"en",id:"git-pull-1",tabindex:"-1"},[t("Git Pull "),l("a",{class:"header-anchor",href:"#git-pull-1","aria-label":'Permalink to "Git Pull {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git pull --rebase <remote>")]),l("td",null,"Fetch the remote’s copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches.")])])]),l("h2",{lang:"en",id:"git-push-1",tabindex:"-1"},[t("Git Push "),l("a",{class:"header-anchor",href:"#git-push-1","aria-label":'Permalink to "Git Push {lang=en}"'},"​")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Command"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"git push <remote> --force")]),l("td",null,"Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you’re absolutely sure you know what you’re doing.")]),l("tr",null,[l("td",null,[l("code",null,"git push <remote> --tags")]),l("td",null,"Tags aren’t automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo.")])])])],-1)])),"main-header":e(()=>[a(n.$slots,"main-header")]),"main-header-after":e(()=>[a(n.$slots,"main-header-after")]),"main-nav":e(()=>[a(n.$slots,"main-nav")]),"main-content-before":e(()=>[a(n.$slots,"main-content-before")]),"main-content":e(()=>[a(n.$slots,"main-content")]),"main-content-after":e(()=>[a(n.$slots,"main-content-after")]),"main-nav-before":e(()=>[a(n.$slots,"main-nav-before")]),"main-nav-after":e(()=>[a(n.$slots,"main-nav-after")]),comment:e(()=>[a(n.$slots,"comment")]),footer:e(()=>[a(n.$slots,"footer")]),aside:e(()=>[a(n.$slots,"aside")]),"aside-custom":e(()=>[a(n.$slots,"aside-custom")]),default:e(()=>[a(n.$slots,"default")]),_:3},8,["frontmatter"])}}};export{T as default,k as usePageData};
