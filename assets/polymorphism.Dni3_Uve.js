import{_ as k}from"./ValaxyMain.vue_vue_type_style_index_0_lang.C3_yHAra.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as g,a as b,u}from"./chunks/vue-router.ChBfvDAv.js";import{X as f,b_ as i,be as n,_ as a,a5 as e,bB as y,b3 as E,b5 as P}from"./framework.BXq2oTmp.js";import"./app.D6GkSuKK.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.yKBkfHmz.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.bnmDaBJL.js";const C=g("/posts/java/polymorphism",async s=>JSON.parse('{"title":"Polymorphism","description":"","frontmatter":{"title":"Polymorphism","title_zh":"多态","date":"2024-08-06 13:55:40","categories":"Program","tags":["Java"]},"headers":[],"relativePath":"pages/posts/java/polymorphism.md","lastUpdated":null}'),{lazy:(s,r)=>s.name===r.name}),O={__name:"polymorphism",setup(s,{expose:r}){var o;const{data:h}=C(),m=u(),p=b(),t=Object.assign(p.meta.frontmatter||{},((o=h.value)==null?void 0:o.frontmatter)||{});return m.currentRoute.value.data=h.value,P("valaxy:frontmatter",t),globalThis.$frontmatter=t,r({frontmatter:{title:"Polymorphism",title_zh:"多态",date:"2024-08-06 13:55:40",categories:"Program",tags:["Java"]}}),(l,d)=>{const c=k;return E(),f(c,{frontmatter:y(t)},{"main-content-md":i(()=>d[0]||(d[0]=[a("h2",{lang:"zh-CN",id:"多态",tabindex:"-1"},[e("多态 "),a("a",{class:"header-anchor",href:"#多态","aria-label":'Permalink to "多态 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"polymorphism",tabindex:"-1"},[e("Polymorphism "),a("a",{class:"header-anchor",href:"#polymorphism","aria-label":'Permalink to "Polymorphism {lang=en}"'},"​")],-1),a("p",null,"多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。",-1),a("h3",{lang:"zh-CN",id:"编译时多态-静态多态",tabindex:"-1"},[e("编译时多态（静态多态） "),a("a",{class:"header-anchor",href:"#编译时多态-静态多态","aria-label":'Permalink to "编译时多态（静态多态） {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"compile-time-polymorphism-static-polymorphism",tabindex:"-1"},[e("Compile-time Polymorphism (Static Polymorphism) "),a("a",{class:"header-anchor",href:"#compile-time-polymorphism-static-polymorphism","aria-label":'Permalink to "Compile-time Polymorphism (Static Polymorphism) {lang=en}"'},"​")],-1),a("p",null,"编译时多态，也称为静态多态，通过方法重载（Overloading）实现。编译时多态在编译阶段决定调用哪一个方法。",-1),a("h3",{lang:"zh-CN",id:"运行时多态-动态多态",tabindex:"-1"},[e("运行时多态（动态多态） "),a("a",{class:"header-anchor",href:"#运行时多态-动态多态","aria-label":'Permalink to "运行时多态（动态多态） {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"run-time-polymorphism-dynamic-polymorphism",tabindex:"-1"},[e("Run-time Polymorphism (Dynamic Polymorphism) "),a("a",{class:"header-anchor",href:"#run-time-polymorphism-dynamic-polymorphism","aria-label":'Permalink to "Run-time Polymorphism (Dynamic Polymorphism) {lang=en}"'},"​")],-1),a("p",null,"运行时多态，也称为动态多态，通过方法重写（Overriding）实现。运行时多态在运行阶段决定调用哪一个方法，依赖于对象的实际类型。",-1),a("h2",{lang:"zh-CN",id:"方法重写",tabindex:"-1"},[e("方法重写 "),a("a",{class:"header-anchor",href:"#方法重写","aria-label":'Permalink to "方法重写 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"overriding",tabindex:"-1"},[e("Overriding "),a("a",{class:"header-anchor",href:"#overriding","aria-label":'Permalink to "Overriding {lang=en}"'},"​")],-1),a("p",null,"在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为重写。 子类重写父类的非静态方法，替代父类的方法实现，运行时基于实际对象类型调用方法（动态绑定）。",-1),a("h3",{lang:"zh-CN",id:"访问权限",tabindex:"-1"},[e("访问权限 "),a("a",{class:"header-anchor",href:"#访问权限","aria-label":'Permalink to "访问权限 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"access-modifiers",tabindex:"-1"},[e("Access Modifiers "),a("a",{class:"header-anchor",href:"#access-modifiers","aria-label":'Permalink to "Access Modifiers {lang=en}"'},"​")],-1),a("p",null,"子类方法的访问权限比父类方法的访问权限更宽松。",-1),a("h3",{lang:"zh-CN",id:"返回类型",tabindex:"-1"},[e("返回类型 "),a("a",{class:"header-anchor",href:"#返回类型","aria-label":'Permalink to "返回类型 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"return-type",tabindex:"-1"},[e("Return Type "),a("a",{class:"header-anchor",href:"#return-type","aria-label":'Permalink to "Return Type {lang=en}"'},"​")],-1),a("p",null,[a("s",null,"子类方法的返回类型必须与父类方法的返回类型相同。")],-1),a("p",null,"子类方法的返回类型可以是父类方法返回类型的子类型。换而言之，子类方法的返回值比父类方法的返回值更具体。",-1),a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},[a("i",{class:"icon i-carbon-thumbs-up"}),a("span",{lang:"en"},"tip"),a("span",{lang:"zh-CN"},"提示")]),a("p",null,[e("Java5 引入了"),a("strong",null,"协变返回类型"),e("，允许子类重写父类方法时返回一个子类类型。")]),a("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme line-numbers-mode"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"java"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[a("code",{"v-pre":""},[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Animal"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Animal "),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getAnimal"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        System.out."),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"println"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"This is an animal!"'),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Animal"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),e(`
`),a("span",{class:"line"}),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"class"),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Dog"),a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," extends"),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Animal"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    @"),a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    public"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Dog "),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getAnimal"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        System.out."),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"println"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"This is a dog!"'),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Dog"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),e(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),a("button",{class:"collapse"}),a("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br"),a("span",{class:"line-number"},"5"),a("br"),a("span",{class:"line-number"},"6"),a("br"),a("span",{class:"line-number"},"7"),a("br"),a("span",{class:"line-number"},"8"),a("br"),a("span",{class:"line-number"},"9"),a("br"),a("span",{class:"line-number"},"10"),a("br"),a("span",{class:"line-number"},"11"),a("br"),a("span",{class:"line-number"},"12"),a("br"),a("span",{class:"line-number"},"13"),a("br"),a("span",{class:"line-number"},"14"),a("br")])])],-1),a("h3",{lang:"zh-CN",id:"参数列表",tabindex:"-1"},[e("参数列表 "),a("a",{class:"header-anchor",href:"#参数列表","aria-label":'Permalink to "参数列表 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"parameter-list",tabindex:"-1"},[e("Parameter List "),a("a",{class:"header-anchor",href:"#parameter-list","aria-label":'Permalink to "Parameter List {lang=en}"'},"​")],-1),a("p",null,"子类方法的方法名和参数列表必须与父类方法的方法名和参数列表相同。",-1),a("h3",{lang:"zh-CN",id:"异常处理",tabindex:"-1"},[e("异常处理 "),a("a",{class:"header-anchor",href:"#异常处理","aria-label":'Permalink to "异常处理 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"exceptions",tabindex:"-1"},[e("Exceptions "),a("a",{class:"header-anchor",href:"#exceptions","aria-label":'Permalink to "Exceptions {lang=en}"'},"​")],-1),a("p",null,"子类方法不能比父类方法抛出更多的异常，可以不抛出异常或者抛出更少的异常。",-1),a("h3",{lang:"zh-CN",id:"继承",tabindex:"-1"},[e("继承 "),a("a",{class:"header-anchor",href:"#继承","aria-label":'Permalink to "继承 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"inheritance",tabindex:"-1"},[e("Inheritance "),a("a",{class:"header-anchor",href:"#inheritance","aria-label":'Permalink to "Inheritance {lang=en}"'},"​")],-1),a("p",null,[e("无法重写无法继承的方法，如父类中访问权限为"),a("code",null,"private"),e("的方法。")],-1),a("h3",{lang:"zh-CN",id:"final-标识",tabindex:"-1"},[e("final 标识 "),a("a",{class:"header-anchor",href:"#final-标识","aria-label":'Permalink to "final 标识 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"final-keyword",tabindex:"-1"},[e("final Keyword "),a("a",{class:"header-anchor",href:"#final-keyword","aria-label":'Permalink to "final Keyword {lang=en}"'},"​")],-1),a("p",null,[e("无法重写方法声明为"),a("code",null,"final"),e("方法。final 方法可以被继承, 但是不能被重写。")],-1),a("h3",{lang:"zh-CN",id:"静态方法",tabindex:"-1"},[e("静态方法 "),a("a",{class:"header-anchor",href:"#静态方法","aria-label":'Permalink to "静态方法 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"static-method",tabindex:"-1"},[e("static method "),a("a",{class:"header-anchor",href:"#static-method","aria-label":'Permalink to "static method {lang=en}"'},"​")],-1),a("p",null,"无法重写静态方法。不能用子类的非静态方法覆写父类的静态方法，否则编译会报错。",-1),a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},[a("i",{class:"icon i-carbon-thumbs-up"}),a("span",{lang:"en"},"tip"),a("span",{lang:"zh-CN"},"提示")]),a("p",null,"《JAVA 编程思想》中多次的提到：方法是静态的、他的行为就不具有多态性。静态方法是与类、而非单个对象相关联的。")],-1),a("h2",{lang:"zh-CN",id:"方法重载",tabindex:"-1"},[e("方法重载 "),a("a",{class:"header-anchor",href:"#方法重载","aria-label":'Permalink to "方法重载 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"overloading",tabindex:"-1"},[e("Overloading "),a("a",{class:"header-anchor",href:"#overloading","aria-label":'Permalink to "Overloading {lang=en}"'},"​")],-1),a("p",null,"重载是指在同一个类中定义多个方法，它们具有相同的名称但是参数列表不同。 重载的方法必须具有不同的参数列表，可以有不同的返回类型。",-1),a("h3",{lang:"zh-CN",id:"三同",tabindex:"-1"},[e("三同 "),a("a",{class:"header-anchor",href:"#三同","aria-label":'Permalink to "三同 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"three-same",tabindex:"-1"},[e("Three Same "),a("a",{class:"header-anchor",href:"#three-same","aria-label":'Permalink to "Three Same {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,"方法名称相同：要重载的方法名称必须相同。"),a("li",null,"方法修饰符可以不同：方法的访问修饰符可以相同或不同，但修饰符本身并不作为重载的条件。"),a("li",null,"返回类型可以不同：重载的方法可以有不同的返回类型，但是不能通过返回类型来区分重载的方法。")],-1),a("h3",{lang:"zh-CN",id:"三不同",tabindex:"-1"},[e("三不同 "),a("a",{class:"header-anchor",href:"#三不同","aria-label":'Permalink to "三不同 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"three-different",tabindex:"-1"},[e("Three Different "),a("a",{class:"header-anchor",href:"#three-different","aria-label":'Permalink to "Three Different {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,"参数个数不同：重载的方法可以有不同数量的参数。"),a("li",null,"参数类型不同：重载的方法可以有不同的参数类型。"),a("li",null,"参数顺序不同：重载的方法可以有不同的参数顺序（即使参数的数量和类型相同，只要顺序不同，也可以重载）。")],-1),a("h2",{lang:"zh-CN",id:"隐藏",tabindex:"-1"},[e("隐藏 "),a("a",{class:"header-anchor",href:"#隐藏","aria-label":'Permalink to "隐藏 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"hide",tabindex:"-1"},[e("Hide "),a("a",{class:"header-anchor",href:"#hide","aria-label":'Permalink to "Hide {lang=en}"'},"​")],-1),a("p",null,[a("s",null,"隐藏是指子类定义了一个与父类静态方法签名完全相同的静态方法，被称为隐藏。"),a("s",null,"隐藏的方法必须与父类的方法具有相同的名称、参数列表和返回类型。隐藏的方法不能比父类的方法具有更严格的访问权限。")],-1),a("p",null,"子类隐藏父类的静态方法、变量或内部类，父类和子类各自独立地保留自己的实现。方法调用基于引用类型，而不是实例类型（静态绑定）。 不能用子类的静态方法隐藏父类中的非静态方法，否则编译会报错。",-1),a("h2",{lang:"zh-CN",id:"里氏替换原则",tabindex:"-1"},[e("里氏替换原则 "),a("a",{class:"header-anchor",href:"#里氏替换原则","aria-label":'Permalink to "里氏替换原则 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"liskov-substitution-principle",tabindex:"-1"},[e("Liskov Substitution Principle "),a("a",{class:"header-anchor",href:"#liskov-substitution-principle","aria-label":'Permalink to "Liskov Substitution Principle {lang=en}"'},"​")],-1),a("p",null,"里氏替换原则（Liskov Substitution Principle, LSP）是面向对象编程中的五大基本原则之一。 它由 Barbara Liskov 在 1987 年提出，其基本定义是：",-1),a("div",{lang:"zh-CN"},[a("p",null,"如果对每一个类型为 S 的对象 o1，都有类型为 T 的对象 o2， 使得在所有的程序 P 中，o1 替换为 o2 后，程序 P 的行为没有发生变化，那么类型 S 是类型 T 的子类型。 换而言之，在程序中用基类对象的地方都可以使用其子类对象，且程序行为不变。")],-1),a("div",{lang:"en"},[a("p",null,"What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.")],-1),a("h3",{lang:"zh-CN",id:"含义",tabindex:"-1"},[e("含义 "),a("a",{class:"header-anchor",href:"#含义","aria-label":'Permalink to "含义 {lang=zh-CN}"'},"​")],-1),a("h3",{lang:"en",id:"meaning",tabindex:"-1"},[e("Meaning "),a("a",{class:"header-anchor",href:"#meaning","aria-label":'Permalink to "Meaning {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,"子类必须完全实现父类的方法：子类对父类的方法不能有任何的改动。"),a("li",null,"子类可以有自己的特性：子类可以增加自己独有的方法，但这些方法不应该影响到父类的方法行为。"),a("li",null,"子类可以覆盖父类的方法：在保证子类能够替代父类且程序行为不变的前提下，子类可以覆盖父类的方法。")],-1),a("h2",{lang:"zh-CN",id:"总结",tabindex:"-1"},[e("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"summary",tabindex:"-1"},[e("Summary "),a("a",{class:"header-anchor",href:"#summary","aria-label":'Permalink to "Summary {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,"划清类和对象的界限，它们的作用域是不相同的。"),a("li",null,"多态是指，针对引用类型的方法调用，其取决于其对象类型的方法。")],-1),a("h2",{lang:"zh-CN",id:"参考",tabindex:"-1"},[e("参考 "),a("a",{class:"header-anchor",href:"#参考","aria-label":'Permalink to "参考 {lang=zh-CN}"'},"​")],-1),a("h2",{lang:"en",id:"reference",tabindex:"-1"},[e("Reference "),a("a",{class:"header-anchor",href:"#reference","aria-label":'Permalink to "Reference {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,[a("a",{href:"https://www.cnblogs.com/gaochundong/p/liskov_substitution_principle.html",target:"_blank",rel:"noreferrer"},"里氏替换原则（Liskov Substitution Principle）")]),a("li",null,[a("a",{href:"https://blog.csdn.net/dietime1943/article/details/53161364",target:"_blank",rel:"noreferrer"},"Java 重写的 7 个规则")]),a("li",null,[a("a",{href:"https://www.cnblogs.com/jinggod/p/8503153.html",target:"_blank",rel:"noreferrer"},"类与接口（五）java 多态、方法重写、隐藏")])],-1)])),"main-header":i(()=>[n(l.$slots,"main-header")]),"main-header-after":i(()=>[n(l.$slots,"main-header-after")]),"main-nav":i(()=>[n(l.$slots,"main-nav")]),"main-content-before":i(()=>[n(l.$slots,"main-content-before")]),"main-content":i(()=>[n(l.$slots,"main-content")]),"main-content-after":i(()=>[n(l.$slots,"main-content-after")]),"main-nav-before":i(()=>[n(l.$slots,"main-nav-before")]),"main-nav-after":i(()=>[n(l.$slots,"main-nav-after")]),comment:i(()=>[n(l.$slots,"comment")]),footer:i(()=>[n(l.$slots,"footer")]),aside:i(()=>[n(l.$slots,"aside")]),"aside-custom":i(()=>[n(l.$slots,"aside-custom")]),default:i(()=>[n(l.$slots,"default")]),_:3},8,["frontmatter"])}}};export{O as default,C as usePageData};
