import{_ as b}from"./ValaxyMain.vue_vue_type_style_index_0_lang.DD9lv9nR.js";import"./chunks/@vueuse/motion.BsBBmBGk.js";import{d as u,a as f,u as p}from"./chunks/vue-router.DKq5HN5U.js";import{X as C,b_ as l,be as n,_ as a,a5 as e,bB as G,b3 as k,b5 as P}from"./framework.BXq2oTmp.js";import"./app.Cz5DIfO7.js";import"./chunks/dayjs.C6BNYsUE.js";import"./chunks/vue-i18n.lfRrKsMF.js";import"./chunks/pinia.C_YCGfgp.js";import"./chunks/nprogress.DdFZ7jLs.js";import"./YunComment.vue_vue_type_style_index_0_lang.Dyf1jjxh.js";import"./index.dXt3ZyM3.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DDanGzXB.js";import"./post.DxTy9FEW.js";const w=u("/posts/java/garbage-collect",async t=>JSON.parse('{"title":"Garbage Collect","description":"","frontmatter":{"title":"Garbage Collect","title_cn":"垃圾回收","date":"2024-12-02 22:10:45","categories":"Program","tags":["Java","Garbage Collect","JVM"]},"headers":[],"relativePath":"pages/posts/java/garbage-collect.md","lastUpdated":null}'),{lazy:(t,o)=>t.name===o.name}),j={__name:"garbage-collect",setup(t,{expose:o}){var c;const{data:s}=w(),g=p(),m=f(),i=Object.assign(m.meta.frontmatter||{},((c=s.value)==null?void 0:c.frontmatter)||{});return g.currentRoute.value.data=s.value,P("valaxy:frontmatter",i),globalThis.$frontmatter=i,o({frontmatter:{title:"Garbage Collect",title_cn:"垃圾回收",date:"2024-12-02 22:10:45",categories:"Program",tags:["Java","Garbage Collect","JVM"]}}),(r,h)=>{const d=b;return k(),C(d,{frontmatter:G(i)},{"main-content-md":l(()=>h[0]||(h[0]=[a("h2",{lang:"cn-zh",id:"垃圾回收策略",tabindex:"-1"},[e("垃圾回收策略 "),a("a",{class:"header-anchor",href:"#垃圾回收策略","aria-label":'Permalink to "垃圾回收策略 {lang="cn-zh"}"'},"​")],-1),a("h2",{lang:"en",id:"gc-strategies",tabindex:"-1"},[e("GC Strategies "),a("a",{class:"header-anchor",href:"#gc-strategies","aria-label":'Permalink to "GC Strategies {lang=en}"'},"​")],-1),a("p",null,"如何辨别对象是否需要进行回收（可达）？通常是通过引用和引用链的方式来判断对象是否可达。",-1),a("h3",{id:"引用计数-reference-counting",tabindex:"-1"},[e("引用计数 (Reference Counting) "),a("a",{class:"header-anchor",href:"#引用计数-reference-counting","aria-label":'Permalink to "引用计数 (Reference Counting)"'},"​")],-1),a("p",null,"引用计数是垃圾收集器中的早期策略。在这种方法中，堆中每个对象实例都有一个引用计数。当一个对象被创建时，就将该对象实例分配给一个变量，该变量计数设置为1。当任何其它变量被赋值为这个对象的引用时，计数加1（a = b,则b引用的对象实例的计数器+1），但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1。任何引用计数器为0的对象实例可以被当作垃圾收集。当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减1。",-1),a("p",null,"优点：引用计数收集器可以很快的执行，交织在程序运行中。对程序需要不被长时间打断的实时环境比较有利。",-1),a("p",null,"缺点：无法检测出循环引用。如父对象有一个对子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不可能为0。",-1),a("h3",{id:"可达性分析-reachability-analysis",tabindex:"-1"},[e("可达性分析 (Reachability Analysis) "),a("a",{class:"header-anchor",href:"#可达性分析-reachability-analysis","aria-label":'Permalink to "可达性分析 (Reachability Analysis)"'},"​")],-1),a("p",null,"从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点，无用的节点将会被判定为是可回收的对象。",-1),a("p",null,"在Java语言中，可作为GC Roots的对象包括下面几种：",-1),a("ul",null,[a("li",null,[a("p",null,"虚拟机栈中引用的对象（栈帧中的本地变量表）；")]),a("li",null,[a("p",null,"方法区中类静态属性引用的对象；")]),a("li",null,[a("p",null,"方法区中常量引用的对象；")]),a("li",null,[a("p",null,"本地方法栈中JNI（Native方法）引用的对象。")])],-1),a("h2",{lang:"cn-zh",id:"垃圾回收算法",tabindex:"-1"},[e("垃圾回收算法 "),a("a",{class:"header-anchor",href:"#垃圾回收算法","aria-label":'Permalink to "垃圾回收算法 {lang="cn-zh"}"'},"​")],-1),a("h2",{lang:"en",id:"garbage-collection-algorithms",tabindex:"-1"},[e("Garbage Collection Algorithms "),a("a",{class:"header-anchor",href:"#garbage-collection-algorithms","aria-label":'Permalink to "Garbage Collection Algorithms {lang=en}"'},"​")],-1),a("h3",{id:"标记-清除-mark-sweep",tabindex:"-1"},[e("标记-清除 (Mark-Sweep) "),a("a",{class:"header-anchor",href:"#标记-清除-mark-sweep","aria-label":'Permalink to "标记-清除 (Mark-Sweep)"'},"​")],-1),a("h3",{id:"复制-copying",tabindex:"-1"},[e("复制 (Copying) "),a("a",{class:"header-anchor",href:"#复制-copying","aria-label":'Permalink to "复制 (Copying)"'},"​")],-1),a("h3",{id:"标记-整理-mark-compact",tabindex:"-1"},[e("标记-整理 (Mark-Compact) "),a("a",{class:"header-anchor",href:"#标记-整理-mark-compact","aria-label":'Permalink to "标记-整理 (Mark-Compact)"'},"​")],-1),a("h3",{id:"分代收集-generational-collection",tabindex:"-1"},[e("分代收集 (Generational Collection) "),a("a",{class:"header-anchor",href:"#分代收集-generational-collection","aria-label":'Permalink to "分代收集 (Generational Collection)"'},"​")],-1),a("h2",{lang:"cn-zh",id:"垃圾回收模式",tabindex:"-1"},[e("垃圾回收模式 "),a("a",{class:"header-anchor",href:"#垃圾回收模式","aria-label":'Permalink to "垃圾回收模式 {lang="cn-zh"}"'},"​")],-1),a("h2",{lang:"en",id:"gc-patterns",tabindex:"-1"},[e("GC Patterns "),a("a",{class:"header-anchor",href:"#gc-patterns","aria-label":'Permalink to "GC Patterns {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,[e("Partial GC: 并不收集整个堆的模式。 "),a("ul",null,[a("li",null,"Young GC: 只收集 Young gen 区域的模式。"),a("li",null,"Old GC: 只收集 Old gen 区域的模式。CMS 中存在这种模式。"),a("li",null,"Mixed GC: 收集整个 Young gen 和部分 Old gen 区域的模式。G1 中存在这种模式。")])]),a("li",null,"Full GC: 收集整个堆，包括 Young gen、Old gen 和 Perm gen（如果存在）等所有区域的模式。")],-1),a("h2",{lang:"cn-zh",id:"垃圾回收器",tabindex:"-1"},[e("垃圾回收器 "),a("a",{class:"header-anchor",href:"#垃圾回收器","aria-label":'Permalink to "垃圾回收器 {lang="cn-zh"}"'},"​")],-1),a("h2",{lang:"en",id:"garbage-collectors",tabindex:"-1"},[e("Garbage Collectors "),a("a",{class:"header-anchor",href:"#garbage-collectors","aria-label":'Permalink to "Garbage Collectors {lang=en}"'},"​")],-1),a("h3",{id:"serial-gc",tabindex:"-1"},[e("Serial GC "),a("a",{class:"header-anchor",href:"#serial-gc","aria-label":'Permalink to "Serial GC"'},"​")],-1),a("h3",{id:"parallel-gc",tabindex:"-1"},[e("Parallel GC "),a("a",{class:"header-anchor",href:"#parallel-gc","aria-label":'Permalink to "Parallel GC"'},"​")],-1),a("h3",{id:"cms-concurrent-mark-sweep",tabindex:"-1"},[e("CMS (Concurrent Mark-Sweep) "),a("a",{class:"header-anchor",href:"#cms-concurrent-mark-sweep","aria-label":'Permalink to "CMS (Concurrent Mark-Sweep)"'},"​")],-1),a("h3",{id:"g1-garbage-first",tabindex:"-1"},[e("G1 (Garbage First) "),a("a",{class:"header-anchor",href:"#g1-garbage-first","aria-label":'Permalink to "G1 (Garbage First)"'},"​")],-1),a("h4",{lang:"cn-zh",id:"回收模式",tabindex:"-1"},[e("回收模式 "),a("a",{class:"header-anchor",href:"#回收模式","aria-label":'Permalink to "回收模式 {lang="cn-zh"}"'},"​")],-1),a("ul",null,[a("li",null,"Young GC"),a("li",null,"Mixed GC"),a("li",null,"Full GC")],-1),a("h3",{id:"zgc-z-garbage-collector",tabindex:"-1"},[e("ZGC (Z Garbage Collector) "),a("a",{class:"header-anchor",href:"#zgc-z-garbage-collector","aria-label":'Permalink to "ZGC (Z Garbage Collector)"'},"​")],-1),a("h2",{lang:"cn-zh",id:"参考",tabindex:"-1"},[e("参考 "),a("a",{class:"header-anchor",href:"#参考","aria-label":'Permalink to "参考 {lang="cn-zh"}"'},"​")],-1),a("h2",{lang:"en",id:"references",tabindex:"-1"},[e("References "),a("a",{class:"header-anchor",href:"#references","aria-label":'Permalink to "References {lang=en}"'},"​")],-1),a("ul",null,[a("li",null,[a("a",{href:"https://www.selinux.tech/java/core/",target:"_blank",rel:"noreferrer"},"JustNode: Java Core")]),a("li",null,[a("a",{href:"https://www.cn-zhihu.com/question/41922036/answer/93079526",target:"_blank",rel:"noreferrer"},"Major GC 和 Full GC 的区别是什么？触发条件呢？ - RednaxelaFX 的回答")]),a("li",null,[a("a",{href:"https://www.cnblogs.com/1024Community/p/honery.html",target:"_blank",rel:"noreferrer"},"扒一扒 JVM 的垃圾回收机制，下次面试你准备好了吗")]),a("li",null,[a("a",{href:"https://www.cnblogs.com/aspirant/p/8663872.html",target:"_blank",rel:"noreferrer"},"G1 垃圾收集器架构和如何做到可预测的停顿(阿里)")])],-1)])),"main-header":l(()=>[n(r.$slots,"main-header")]),"main-header-after":l(()=>[n(r.$slots,"main-header-after")]),"main-nav":l(()=>[n(r.$slots,"main-nav")]),"main-content-before":l(()=>[n(r.$slots,"main-content-before")]),"main-content":l(()=>[n(r.$slots,"main-content")]),"main-content-after":l(()=>[n(r.$slots,"main-content-after")]),"main-nav-before":l(()=>[n(r.$slots,"main-nav-before")]),"main-nav-after":l(()=>[n(r.$slots,"main-nav-after")]),comment:l(()=>[n(r.$slots,"comment")]),footer:l(()=>[n(r.$slots,"footer")]),aside:l(()=>[n(r.$slots,"aside")]),"aside-custom":l(()=>[n(r.$slots,"aside-custom")]),default:l(()=>[n(r.$slots,"default")]),_:3},8,["frontmatter"])}}};export{j as default,w as usePageData};
